insertRows(df1,data.frame(list('a','a','a')),1)
insertRows(df1,df1,3)
rawr <- data.frame(df1, df2)
df1
insertRows(df1, data.frame('term', 1.2, 2.22)), 4)
insertRows(df1, data.frame(list('term', 1.2, 2.22)), 4)
df1 <- data.frame(coefs, values, see)
df1
insertRows(df1, data.frame(list('term', 1.2, 2.22)), 4)
insertRows(df1, data.frame(list('--', '--', '--')), 4)
for(i in 1:nrow(df1)+1){
i
}
for(i in 1:nrow(df1)+1){
print(i)
}
for(i in 1:(nrow(df1)+1){
print(i)
}
for(i in 1:(nrow(df1)+1)){
print(i)
}
i
df1 <- data.frame(coefs, values, see)
df1
df2
for(i in (nrow(df1)):(nrow(df2))){
i
}
df1
df2
for(i in (nrow(df1) + 1):(nrow(df2))){
insertRows(df1, data.frame(list('--', '--', '--')), i)
}
df1
for(i in (nrow(df1) + 1):(nrow(df2))){
i
#insertRows(df1, data.frame(list('--', '--', '--')), i)
}
i
seq(1,2)
seq((nrow(df1) + 1), (nrow(df2)))
for(i in seq((nrow(df1) + 1), (nrow(df2)))){
i
#insertRows(df1, data.frame(list('--', '--', '--')), i)
}
for(i in seq((nrow(df1) + 1), (nrow(df2)))){
print(i)
#insertRows(df1, data.frame(list('--', '--', '--')), i)
}
as.numeric(i)
for(i in seq((nrow(df1) + 1), (nrow(df2)))){
as.numeric(i)
insertRows(df1, data.frame(list('--', '--', '--')), i)
}
df1
df2
insertRows(df1, data.frame(list('--', '--', '--')), 4)
seq((nrow(df1) + 1), (nrow(df2)))
for(i in seq((nrow(df1) + 1), (nrow(df2)))){
as.numeric(i)
insertRows(df1, data.frame(list('--', '--', '--')), i)
}
df1
df1 <- data.frame(coefs, values, see)
df1
insertRows(df1, data.frame(list('--', '--', '--')), i)
}
df1 <- data.frame(coefs, values, see)
df2 <- data.frame(values2, see2)
df1
df2
for(i in seq((nrow(df1) + 1), (nrow(df2)))){
insertRows(df1, data.frame(list('--', '--', '--')), i)
}
df1
df1
df2
insertRows(df1, data.frame(list('--', '--', '--')), i)
df1
df2
for(i in seq((nrow(df1) + 1), (nrow(df2)))){
df1 <- insertRows(df1, data.frame(list('--', '--', '--')), i)
}
df1
df2
rawr <- data.frame(df1, df2)
rawr
model_summary_table_binomial <- function(models){
full_model <- models[[length(models)]]
full_model_summary <- summary(full_model)
full_model_table <- tidy(full_model)
model_terms <- attr(models[[model_summary$terms, "term.labels")
model_terms <- c("Constant", model_terms)
for(i in 1:length(models)){
model_summary <- summary(models[[i]])
model_table <- tidy(model)
coefs <- model_table$estimate
SE <- model_table$std.error
df <- data.frame(coefs, SE)
for(i in seq((nrow(df) + 1), (nrow(full_model_table)))){
df <- insertRows(df, data.frame(list('--', '--')), i)
}
}
}
model_summary_table_binomial <- function(models){
full_model <- models[[length(models)]]
full_model_summary <- summary(full_model)
full_model_table <- tidy(full_model)
model_terms <- attr(full_model_summary$terms, "term.labels")
model_terms <- c("Constant", model_terms)
for(i in 1:length(models)){
model_summary <- summary(models[[i]])
model_table <- tidy(model)
coefs <- model_table$estimate
SE <- model_table$std.error
df <- data.frame(coefs, SE)
for(i in seq((nrow(df) + 1), (nrow(full_model_table)))){
df <- insertRows(df, data.frame(list('--', '--')), i)
}
}
}
coefs
data.frame(coefs)
model_summary_table_binomial <- function(models){
full_model <- models[[length(models)]]
full_model_summary <- summary(full_model)
full_model_table <- tidy(full_model)
model_terms <- attr(full_model_summary$terms, "term.labels")
model_terms <- c("Constant", model_terms)
output_table <- data.frame(model_terms)
for(i in 1:length(models)){
model_summary <- summary(models[[i]])
model_table <- tidy(model)
coefs <- model_table$estimate
SE <- model_table$std.error
df <- data.frame(coefs, SE)
for(i in seq((nrow(df) + 1), (nrow(full_model_table)))){
df <- insertRows(df, data.frame(list('--', '--')), i)
}
output_table <- data.frame(output_table, df)
}
output_table
}
model_summary_table_binomial <- function(models){
full_model <- models[[length(models)]]
full_model_summary <- summary(full_model)
full_model_table <- tidy(full_model)
model_terms <- attr(full_model_summary$terms, "term.labels")
model_terms <- c("Constant", model_terms)
output_table <- data.frame(model_terms)
for(i in 1:length(models)){
model_summary <- summary(models[[i]])
model_table <- tidy(model)
coefs <- model_table$estimate
SE <- model_table$std.error
df <- data.frame(coefs, SE)
for(i in seq((nrow(df) + 1), (nrow(full_model_table)))){
df <- insertRows(df, data.frame(list('--', '--')), i)
}
output_table <- data.frame(output_table, df)
}
output_table
}
create_model_objects("am", c("hp", "mpg"), c("disp"), data=mtcars)
#' Hierarchical Formula Generation
#'
#' @param outcome The dependent variable of the hierarchical model
#' @param block1 A character vector, with names of variables. The first block of independent variables.
#' @param ...  A character vector, with names of variables. Subsequent blocks of independent variables.
#' @return A list of \code{lm} formulas
#' @examples
#' \dontrun{create_formula_objects("y", c("lag.quarterly.revenue"))}
#' \dontrun{create_formula_objects("y", c("lag.quarterly.revenue"), c("price.index", "income.level"))}
#' @export
create_formula_objects <- function(outcome, block1, ...){
# Creates formulas for hierarchical models from blocks of predictors
# Pass character vectors with names of independent variables corresponding to each block
blocks <- list(...)
formula <- as.formula(paste(outcome, "~", paste(block1, collapse="+")))
formulas <- list()
if(length(blocks) != 0){
formulas <- list(formula)
for(block in blocks){
formulas[[length(formulas) + 1]] <-  as.formula(paste(formulas[length(formulas)], "+", paste(block, collapse="+")))
}
}
if(length(formulas) == 0){
list(formula)
} else {
formulas
}
}
#' Hierarchical Regression Model Generation
#'
#' @param formulas A set of \code{lm} formulas, created with create_formula_objects
#' @param dataset A data frame containing variables refered to in \code{formulas}, passed to data argument of \code{lm}
#' @return A list of \code{lm} model objects
#' @examples
#' \dontrun{create_model_objects(create_formula_objects("y", c("lag.quarterly.revenue")), dataset = freeny)}
#' \dontrun{create_model_objects(freeny_model_formulas, dataset = freeny)}
#' @export
create_model_objects <- function(formulas, dataset, type=NULL){
if (type == "binomial") {
models <- lapply(X = formulas, data=dataset, glm, type="binomial")
} else {
# Creates all of the hierarchical models from a set of formulas created with create_formula_objects
if (length(formulas) < 2) stop("Your model contains just one block and is not hierarchical, consider lm")
models <- lapply(X = formulas, data=dataset, lm)
}
}
create_formula_objects("am", c("hp", "mpg"), c("disp"), data=mtcars, type="binomial")
create_formula_objects("am", c("hp", "mpg"), c("disp"), data=mtcars)
create_formula_objects("y", c("lag.quarterly.revenue"), c("price.index", "income.level"))
create_formula_objects("am", c("hp", "mpg"), c("disp"))
formels <- create_formula_objects("am", c("hp", "mpg"), c("disp"))
create_model_objects(formels, data=mtcars, type="binomial")
formels[[1]]
glm(formels[[1]], type="binomial")
glm(formels[[1]], data=mtcars, type="binomial")
glm(formels[[1]], data=mtcars, family ="binomial")
create_model_objects <- function(formulas, dataset, type=NULL){
if (type == "binomial") {
models <- lapply(X = formulas, data=dataset, glm, family="binomial")
} else {
# Creates all of the hierarchical models from a set of formulas created with create_formula_objects
if (length(formulas) < 2) stop("Your model contains just one block and is not hierarchical, consider lm")
models <- lapply(X = formulas, data=dataset, lm)
}
}
create_model_objects <- function(formulas, dataset, type=NULL){
if (type == "binomial") {
models <- lapply(X = formulas, data=dataset, glm, family="binomial")
} else {
# Creates all of the hierarchical models from a set of formulas created with create_formula_objects
if (length(formulas) < 2) stop("Your model contains just one block and is not hierarchical, consider lm")
models <- lapply(X = formulas, data=dataset, lm)
}
}
create_model_objects(formels, data=mtcars, family="binomial")
create_model_objects(formels, data=mtcars, type="binomial")
moduls <- create_model_objects(formels, data=mtcars, type="binomial")
moduls
model_summary_table_binomial(moduls)
library("broom", lib.loc="~/Documents/AutoModel/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
model_summary_table_binomial(moduls)
model_summary_table_binomial <- function(models){
full_model <- models[[length(models)]]
full_model_summary <- summary(full_model)
full_model_table <- tidy(full_model)
model_terms <- attr(full_model_summary$terms, "term.labels")
model_terms <- c("Constant", model_terms)
output_table <- data.frame(model_terms)
for(i in 1:length(models)){
model_summary <- summary(models[[i]])
model_table <- tidy(model)
coefs <- model_table$estimate
SE <- model_table$std.error
df <- data.frame(coefs, SE)
for(i in seq((nrow(df) + 1), (nrow(full_model_table)))){
df <- insertRows(df, data.frame(list('--', '--')), i)
}
output_table <- data.frame(output_table, df)
}
output_table
}
model_summary_table_binomial(moduls)
model_summary_table_binomial(moduls)
model_summary_table_binomial <- function(models){
full_model <- models[[length(models)]]
full_model_summary <- summary(full_model)
full_model_table <- tidy(full_model)
model_terms <- attr(full_model_summary$terms, "term.labels")
model_terms <- c("Constant", model_terms)
output_table <- data.frame(model_terms)
for(i in 1:length(models)){
model_summary <- summary(models[[i]])
model_table <- tidy(models[[i]])
coefs <- model_table$estimate
SE <- model_table$std.error
df <- data.frame(coefs, SE)
for(i in seq((nrow(df) + 1), (nrow(full_model_table)))){
df <- insertRows(df, data.frame(list('--', '--')), i)
}
output_table <- data.frame(output_table, df)
}
output_table
}
model_summary_table_binomial(moduls)
library("rowr", lib.loc="~/Documents/AutoModel/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
model_summary_table_binomial(moduls)
full_model <- models[[length(moduls)]]
full_model <- moduls[[length(moduls)]]
full_model
full_model_summary <- summary(full_model)
full_model_summary
full_model_table <- tidy(full_model)
full_model_table
model_terms <- attr(full_model_summary$terms, "term.labels")
model_terms
model_terms <- c("Constant", model_terms)
model_terms
output_table <- data.frame(model_terms)
output_table
output_table <- data.frame(model_terms)
for(i in 1:length(models)){
model_summary <- summary(models[[i]])
99a0sjf
for(i in 1:length(moduls)){
model_summary <- summary(moduls[[i]])
model_table <- tidy(moduls[[i]])
coefs <- model_table$estimate
SE <- model_table$std.error
df <- data.frame(coefs, SE)
for(i in seq((nrow(df) + 1), (nrow(full_model_table)))){
df <- insertRows(df, data.frame(list('--', '--')), i)
}
output_table <- data.frame(output_table, df)
output_table
}
output_table
df
sort(df)
formels <- create_formula_objects("am", c("hp", "mpg"), c("disp"))
moduls
moduls[[1]]
model_terms
for(i in 1:length(moduls)){
model_summary <- summary(moduls[[i]])
model_table <- tidy(moduls[[i]])
coefs <- model_table$estimate
SE <- model_table$std.error
df <- data.frame(coefs, SE)
for(i in seq((nrow(df) + 1), (nrow(full_model_table)))){
df <- insertRows(df, data.frame(list('--', '--')), i)
}
output_table <- data.frame(output_table, df)
}
output_table
df
model_terms
for(i in 1:(length(moduls)-1){
model_summary <- summary(moduls[[i]])
model_table <- tidy(moduls[[i]])
coefs <- model_table$estimate
SE <- model_table$std.error
df <- data.frame(coefs, SE)
for(i in seq((nrow(df) + 1), (nrow(full_model_table)))){
df <- insertRows(df, data.frame(list('--', '--')), i)
}
output_table <- data.frame(output_table, df)
}
for(i in 1:(length(moduls)-1){
model_summary <- summary(moduls[[i]])
model_table <- tidy(moduls[[i]])
coefs <- model_table$estimate
SE <- model_table$std.error
df <- data.frame(coefs, SE)
for(i in seq((nrow(df) + 1), (nrow(full_model_table)))){
df <- insertRows(df, data.frame(list('--', '--')), i)
}
output_table <- data.frame(output_table, df)
}
output_table
full_model_table
full_model <- moduls[[length(moduls)]]
full_model_summary <- summary(full_model)
full_model_table <- tidy(full_model)
model_terms <- attr(full_model_summary$terms, "term.labels")
model_terms
model_terms <- c("Constant", model_terms)
output_table <- data.frame(model_terms)
for(i in 1:(length(moduls)-1)){
model_summary <- summary(moduls[[i]])
model_table <- tidy(moduls[[i]])
coefs <- model_table$estimate
SE <- model_table$std.error
df <- data.frame(coefs, SE)
for(i in seq((nrow(df) + 1), (nrow(full_model_table)))){
df <- insertRows(df, data.frame(list('--', '--')), i)
}
output_table <- data.frame(output_table, df)
}
output_table
model_summary <- summary(moduls[[2]])
model_table <- tidy(moduls[[2]])
model_summary
model_table
coefs <- model_table$estimate
coefs
SE <- model_table$std.error
df <- data.frame(coefs, SE)
SE
df
for(i in seq((nrow(df) + 1), (nrow(full_model_table)))){
df <- insertRows(df, data.frame(list('--', '--')), i)
}
df
model_summary <- summary(moduls[[2]])
model_table <- tidy(moduls[[2]])
coefs <- model_table$estimate
SE <- model_table$std.error
df <- data.frame(coefs, SE)
df
output_table
data.frame(output_table, df)
model_summary_table_binomial <- function(models){
full_model <- models[[length(models)]]
full_model_summary <- summary(full_model)
full_model_table <- tidy(full_model)
model_terms <- attr(full_model_summary$terms, "term.labels")
model_terms <- c("Constant", model_terms)
output_table <- data.frame(model_terms)
for(i in 1:length(models)){
model_summary <- summary(models[[i]])
model_table <- tidy(models[[i]])
coefs <- model_table$estimate
SE <- model_table$std.error
df <- data.frame(coefs, SE)
if(nrow(df) < nrow(full_model_table)){
for(i in seq((nrow(df) + 1), (nrow(full_model_table)))){
df <- insertRows(df, data.frame(list('--', '--')), i)
}
}
output_table <- data.frame(output_table, df)
}
output_table
}
model_summary_table_binomial(moduls)
head(mtcars)
formels <- create_formula_objects("am", c("hp", "mpg"), c("disp"), c("drat"))
moduls <- create_model_objects(formels, data=mtcars, type="binomial")
moduls
model_summary_table_binomial(moduls)
library(AutoModel)
roxygen2::roxygenize()
library(AutoModel)
library(AutoModel)
library(AutoModel)
library(AutoModel)
install.packages(c("BH", "mnormt", "VGAM"))
library(AutoModel)
library(AutoModel)
library(AutoModel)
library(AutoModel)
library(AutoModel)
roxygen2::roxygenize()
library(AutoModel)
library(AutoModel)
library(AutoModel)
devtools::use_vignette("Auto Model")
library(devtools)
install.packages("devtools")
library("devtools", lib.loc="~/Documents/AutoModel/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
devtools::use_vignette("Auto Model")
install.packages("rmarkdown")
library(rmarkdown)
install.packages("knitr")
library(knitr)
devtools::use_vignette("Auto Model")
library(AutoModel)
run_model("mpg", c("disp", "hp"), c("cyl", "wt"), c("drat", "qsec"), dataset=mtcars)
run_model("mpg", c("disp", "hp"), c("cyl", "wt"), c("drat", "qsec"), dataset=mtcars)
library(AutoModel)
run_model("mpg", c("disp", "hp"), c("cyl", "wt"), c("drat", "qsec"), dataset=mtcars)
?glm
library(AutoModel)
run_model("mpg", c("disp", "hp"), c("cyl", "wt"), c("drat", "qsec"), dataset=mtcars)
packrat::snapshot(prompt = FALSE)
run_model("mpg", c("disp", "hp"), c("cyl", "wt"), c("drat", "qsec"), dataset=mtcars)
library(AutoModel)
run_model("mpg", c("disp", "hp"), c("cyl", "wt"), c("drat", "qsec"), dataset=mtcars)
car::avPlots(lm(mpg ~ cyl + disp ,data=mtcars))
roxygen2::roxygenize()
detach("package:AutoModel", unload=TRUE)
library(AutoModel)
run_model("mpg", c("disp", "hp"), c("cyl", "wt"), c("drat", "qsec"), dataset=mtcars)
library("AutoModel", lib.loc="~/Documents/AutoModel/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
run_model("mpg", c("disp", "hp"), c("cyl", "wt"), c("drat", "qsec"), dataset=mtcars)
library(AutoModel)
library(AutoModel)
library(AutoModel)
library(AutoModel)
library(AutoModel)
library(AutoModel)
run_model("mpg", c("disp", "hp"), c("cyl", "wt"), c("drat", "qsec"), dataset=mtcars)
library(AutoModel)
library(AutoModel)
library(AutoModel)
library(AutoModel)
library(AutoModel)
library(AutoModel)
library(AutoModel)
library(AutoModel)
roxygen2::roxygenize()
library("roxygen2", lib.loc="~/Documents/AutoModel/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(AutoModel)
library(AutoModel)
roxygen2::roxygenize()
install.packages("roxygen2")
roxygen2::roxygenize()
library(AutoModel)
library(AutoModel)
roxygen2::roxygenize()
roxygen2::roxygenize()
library(AutoModel)
library(AutoModel)
roxygen2::roxygenize()
