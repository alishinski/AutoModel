{
    "contents" : "#' Automated Multiple Regression Modelling\n#'\n#' @param outcome The dependent variable of the hierarchical model\n#' @param block1 A character vector, with names of variables. The first block of independent variables.\n#' @param ...  A character vector, with names of variables. Subsequent blocks of independent variables.\n#' @param dataset A data frame containing variables refered to in \\code{formulas}, passed to data argument of \\code{lm}\n#' @param transform.outcome A boolean. If TRUE, a variable transformation of the outcome is substituted in the final model if outcome is non-normal.\n#' @details Calls other functions to generate model objects and test them, given specified model parameters and other options.  Formatted output is produced via \\code{model_output}\n#' @examples\n#' runmodel(\"y\", c(\"lag.quarterly.revenue\"), c(\"price.index\", \"income.level\"))\n#'\nrun_model <- function(outcome, block1, ..., dataset, transform.outcome=F){\n  # Main function that calls the others to generate model objects, and test and summarize those model objects\n  forms <- create_formula_objects(outcome, block1, ...)\n  models <- create_model_objects(forms, dataset)\n  top_model <- models[[length(models)]]\n  assumptions_check(top_model)\n  model_output(models)\n}\n\n#' Hierarchical Formula Generation\n#'\n#' @param outcome The dependent variable of the hierarchical model\n#' @param block1 A character vector, with names of variables. The first block of independent variables.\n#' @param ...  A character vector, with names of variables. Subsequent blocks of independent variables.\n#' @return A list of \\code(lm) formulas\n#' @examples\n#' create_formula_objects(\"y\", c(\"lag.quarterly.revenue\"))\n#' create_formula_objects(\"y\", c(\"lag.quarterly.revenue\"), c(\"price.index\", \"income.level\"))\n#'\ncreate_formula_objects <- function(outcome, block1, ...){\n  # Creates formulas for hierarchical models from blocks of predictors\n  # Pass character vectors with names of independent variables corresponding to each block\n  blocks <- list(...)\n  formula <- as.formula(paste(outcome, \"~\", paste(block1, collapse=\"+\")))\n  formulas <- list()\n  if(length(blocks) != 0){\n    formulas <- list(formula)\n  for(block in blocks){\n  formulas[[length(formulas) + 1]] <-  as.formula(paste(formulas[length(formulas)], \"+\", paste(block, collapse=\"+\")))\n  }\n  }\n  if(length(formulas) == 0){\n    formula\n  } else {\n    formulas\n  }\n}\n\n#' Hierarchical Regression Model Generation\n#'\n#' @param formulas A set of \\code{lm} formulas, created with create_formula_objects\n#' @param dataset A data frame containing variables refered to in \\code{formulas}, passed to data argument of \\code{lm}\n#' @return A list of \\code{lm} model objects\n#' @examples\n#' create_model_objects(create_formula_objects(\"y\", c(\"lag.quarterly.revenue\")), dataset = freeny)\n#' create_model_objects(freeny_model_formulas, dataset = freeny)\n#'\ncreate_model_objects <- function(formulas, dataset){\n  # Creates all of the hierarchical models from a set of formulas created with create_formula_objects\n  models <- lapply(X = forms, data=freeny, lm)\n}\n\n#' Multiple Regression Assumption Checking\n#'\n#' @param model A \\code{lm} model object.  \\code{run_model} automatically calls this function for the model with all blocks of predictors included.\n#' @details Creates objects related to multiple regression assumption checking.  These objects are used by \\code{model_output} to produce readable output.\n#' @examples\n#' assumptions_check(freeny_model)\n#'\nassumptions_check <- function(model){\n  # Creates objects needed for assumption checking and output printing\n  dw <<- dwtest(model)$statistic\n  dwp <<- dwtest(model)$p.value\n  #partplots <- avPlots(model)\n  residplot <<- plot(predict(model), studres(model), main=\"Residuals by Predicted value\", xlab=\"Unstandardized Predicted Values\", ylab=\"Studentized Residuals\")\n  cormat <<- cor(data.frame(lapply(model.frame(model), as.numeric)), use=\"pairwise.complete.obs\")\n  vifs <<- vif(model)\n  standresids <<- stdres(model)\n  cdists <<- cooks.distance(model)\n  levplot <<- leveragePlots(model)\n  residplot <<- hist(standresids, prob=T, breaks = 30, main = \"Plot of Std Residuals\", xlab=\"Std Residuals\")\n  normresids <<- shapiro.test(standresids)$p.value\n  probDist <<- pnorm(stdres(model))\n}\n\n#' Multiple Regression Assumption Checking\n#'\n#' @param models A list of \\code{lm} model objects.  A set of model objects created by \\code{create_model_object}.\n#' @details Creates plots and text output to summarize models and check assumptions via objects created by \\code{assumptions_check}.  Uses full model with all predictors.\n#' @examples\n#' model_check(freeny_models)\n#'\nmodel_output <- function(models){\n  # Produces plots and prints relevant messages and outputs.\n  model <- models[[length(models)]]\n  cat(\"Durbin-Watson = \", dw, \"p value = \", dwp, \"\\n\")\n  cat(\"Partial Regression plots (all relationships should be linear):\\n\")\n  residplot\n  cat(\"Correlation Matrix for model (correlation >.70 indicates severe multicollinearity)\\n\")\n  print(cormat)\n  cat(\"Variance inflation factor (<10 desired):\\n\")\n  print(vifs)\n  cat(\"Standardized Residuals (observations > 3.00 problematic):\\n\")\n  res <- sort(abs(standresids), decreasing = T)\n  print(res)\n  cat(\"Cook's distance (values >.2 problematic):\\n\")\n  print(sort(cdists, decreasing = T))\n  levplot\n  residplot\n  mean(stdres(model))\n  sd(stdres(model))\n  curve(dnorm(x,mean(stdres(model)), sd(stdres(model))), col=\"darkblue\", lwd=2, add=TRUE, yaxt=\"n\")\n  cat(\"Normality of standardized model residuals:\", \" Shapiro-Wilk (p-value): \", normresids, \"\\n\")\n  plot(ppoints(length(stdres(model))), sort(probDist), main = \"PP Plot\", xlab = \"Observed Probability\", ylab = \"Expected Probability\")\n  abline(0,1)\n  cat(\"Model change statistics\\n\")\n  # Compares the models between each block of predictors\n  for(i in 1:(length(models) - 1)){\n    modelCompare(models[[i]], models[[i + 1]])\n  }\n  cat(\"Model including all predictors\\n\")\n  summary(model)\n}\n",
    "created" : 1430252797428.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2523848238",
    "id" : "387D23D7",
    "lastKnownWriteTime" : 1431294487,
    "path" : "~/Documents/AutoModel/R/runmodel.R",
    "project_path" : "R/runmodel.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}