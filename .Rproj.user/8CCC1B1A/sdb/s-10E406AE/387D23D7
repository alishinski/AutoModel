{
    "contents" : "library(lmtest)\nlibrary(datasets)\nlibrary(MASS)\nlibrary(lmSupport)\nlibrary(roxygen2)\nlibrary(devtools)\nlibrary(stringr)\n\n##tests\nforms <- create_formula_objects(\"y\", c(\"lag.quarterly.revenue\"), c(\"price.index\", \"income.level\"))\nmods <- create_model_objects(forms, freeny)\nassumptions_check(mods[[2]])\nmodel_output(mods)\nrunmodel(\"y\", c(\"lag.quarterly.revenue\"), c(\"price.index\", \"income.level\"), dataset=freeny)\n\n### Extra stuff that's to be implemented later\n#sort(stdres(lm(mods[[2]])), decreasing = T)\n#sort(standresids, decreasing = T)\n#res <- sort(abs(stdres(lm(mods[[2]]))), decreasing = T)\n#res\n#vartransform <- function(model){\n#  shapiro.test(response)$p.value\n#}\n\n### MODEL OUTPUT\nfor(i in 1:(length(mods) - 1)){\n  modelCompare(mods[[i]], mods[[i + 1]])\n}\n\n### Main model function\nrunmodel <- function(outcome, block1, ..., dataset, transform.outcome=F){\n  forms <- create_formula_objects(outcome, block1, ...)\n  models <- create_model_objects(forms, dataset)\n  top_model <- models[[length(models)]]\n  assumptions_check(top_model)\n  model_output(models)\n}\n\n### Creates formulas for hierarchical models\ncreate_formula_objects <- function(outcome, block1, ...){\n  blocks <- list(...)\n  formula <- as.formula(paste(outcome, \"~\", paste(block1, collapse=\"+\")))\n  formulas <- list()\n  if(length(blocks) != 0){\n    formulas <- list(formula)\n  for(block in blocks){\n  formulas[[length(formulas) + 1]] <-  as.formula(paste(formulas[length(formulas)], \"+\", paste(block, collapse=\"+\")))\n  }\n  }\n  if(length(formulas) == 0){\n    formula\n  } else {\n    formulas\n  }\n}\n\n### Creates all of the hierarchical models from the created formulas\ncreate_model_objects <- function(formulas, dataset){\n  models <- lapply(X = forms, data=freeny, lm)\n}\n\n#1: durbin/watson\n#2a: partial plots, linearity\n#2b: unstd predicted values vs studentized residuals, linearity\n#3: unstd predicted values vs studentized residuals, homogeneity\n#4: Correlations, tolerance, VIF\n#5: Std residual +- 3SD, cooks D, leverage\n#6: Normality of residual distribution, histogram, PP plot\n\nassumptions_check <- function(model){\n  ### GATHERING INFORMATION FOR ASSUMPTION CHECKING\n  dw <<- dwtest(model)$statistic\n  dwp <<- dwtest(model)$p.value\n  #partplots <- avPlots(model)\n  residplot <<- plot(predict(model), studres(model), main=\"Residuals by Predicted value\", xlab=\"Unstandardized Predicted Values\", ylab=\"Studentized Residuals\")\n  cormat <<- cor(data.frame(lapply(model.frame(model), as.numeric)), use=\"pairwise.complete.obs\")\n  vifs <<- vif(model)\n  standresids <<- stdres(model)\n  cdists <<- cooks.distance(model)\n  levplot <<- leveragePlots(model)\n  residplot <<- hist(standresids, prob=T, breaks = 30, main = \"Plot of Std Residuals\", xlab=\"Std Residuals\")\n  normresids <<- shapiro.test(standresids)$p.value\n  probDist <<- pnorm(stdres(model))\n}\n\nmodel_output <- function(models){\n  model <- models[[length(models)]]\n  cat(\"Durbin-Watson = \", dw, \"p value = \", dwp, \"\\n\")\n  cat(\"Partial Regression plots (all relationships should be linear):\\n\")\n  ##partplots\n  ##cat(\"Plot of studentized residuals (should be linear and homogenous across predicted values)\\n\")\n  residplot\n  cat(\"Correlation Matrix for model (correlation >.70 indicates severe multicollinearity)\\n\")\n  print(cormat)\n  cat(\"Variance inflation factor (<10 desired):\\n\")\n  print(vifs)\n  cat(\"Standardized Residuals (observations > 3.00 problematic):\\n\")\n  res <- sort(abs(standresids), decreasing = T)\n  print(res)\n  cat(\"Cook's distance (values >.2 problematic):\\n\")\n  print(sort(cdists, decreasing = T))\n  ##cat(\"Leverage Plot\\n\")\n  levplot\n  ##cat(\"Plot of standardized model residuals\\n\")\n  residplot\n  mean(stdres(model))\n  sd(stdres(model))\n  curve(dnorm(x,mean(stdres(model)), sd(stdres(model))), col=\"darkblue\", lwd=2, add=TRUE, yaxt=\"n\")\n  cat(\"Normality of standardized model residuals:\", \" Shapiro-Wilk (p-value): \", normresids, \"\\n\")\n  ##cat(\"PP plot:\")\n  plot(ppoints(length(stdres(model))), sort(probDist), main = \"PP Plot\", xlab = \"Observed Probability\", ylab = \"Expected Probability\")\n  abline(0,1)\n  cat(\"Model change statistics\\n\")\n  ### MODEL OUTPUT\n  for(i in 1:(length(models) - 1)){\n    modelCompare(models[[i]], models[[i + 1]])\n  }\n  cat(\"Model including all predictors\\n\")\n  summary(model)\n}\n",
    "created" : 1430252797428.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1091216965",
    "id" : "387D23D7",
    "lastKnownWriteTime" : 1431213460,
    "path" : "~/Documents/AutoModel/R/runmodel.R",
    "project_path" : "R/runmodel.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}